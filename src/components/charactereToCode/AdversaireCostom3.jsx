/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 adversaireCostom3.glb 
*/

import React, { Suspense, useEffect } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations, Environment } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { useCustomization } from "@/contexts/Customization";
import * as THREE from "three";

export function Model({ ...props }) {
  const group = React.useRef();
  const { scene, animations } = useGLTF("/models/adversaireCostom3.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions } = useAnimations(animations, group);
  const { animation, setAnimation } = useCustomization();

  useEffect(() => {
    if (actions && animation) {
      // Arrêter les actions en cours
      Object.values(actions).forEach((action) => action.stop());

      // Jouer l'animation sélectionnée
      const selectedAction = actions[animation];
      if (selectedAction) {
        selectedAction.setLoop(THREE.LoopOnce);
        selectedAction.clampWhenFinished = true;
        selectedAction.reset().play();
        console.log(`Playing animation: ${animation}`);
      } else {
        console.warn(`Animation "${animation}" not found`);
      }
    }
  }, [actions, animation]);
  console.log("actions: ", actions);

  return (
    <>
      <Suspense
        fallback={
          <mesh scale={0.2}>
            <boxGeometry />
            <meshNormalMaterial />
          </mesh>
        }
      >
        <group ref={group} {...props} dispose={null}>
          <group name="Scene">
            <group name="Armature" scale={1.7} position={[0, -1, 0]}>
              <primitive object={nodes.mixamorigHips} />
              <primitive object={nodes.Ctrl_Master} />
              <primitive object={nodes.Ctrl_ArmPole_IK_Left} />
              <primitive object={nodes.Ctrl_Hand_IK_Left} />
              <primitive object={nodes.Ctrl_ArmPole_IK_Right} />
              <primitive object={nodes.Ctrl_Hand_IK_Right} />
              <primitive object={nodes.Ctrl_Foot_IK_Left} />
              <primitive object={nodes.Ctrl_LegPole_IK_Left} />
              <primitive object={nodes.Ctrl_Foot_IK_Right} />
              <primitive object={nodes.Ctrl_LegPole_IK_Right} />
              <skinnedMesh
                name="adversaireBody001"
                geometry={nodes.adversaireBody001.geometry}
                material={materials["skinBase.002"]}
                skeleton={nodes.adversaireBody001.skeleton}
              />
              <skinnedMesh
                name="lightBauch001"
                geometry={nodes.lightBauch001.geometry}
                material={materials["ledRouge.001"]}
                skeleton={nodes.lightBauch001.skeleton}
              />
              <skinnedMesh
                name="lightBrust001"
                geometry={nodes.lightBrust001.geometry}
                material={materials["ledRouge.001"]}
                skeleton={nodes.lightBrust001.skeleton}
              />
              <skinnedMesh
                name="lightBrust2001"
                geometry={nodes.lightBrust2001.geometry}
                material={materials["ledRouge.001"]}
                skeleton={nodes.lightBrust2001.skeleton}
              />
              <skinnedMesh
                name="visiere001"
                geometry={nodes.visiere001.geometry}
                material={materials["visiere.001"]}
                skeleton={nodes.visiere001.skeleton}
              />
            </group>
          </group>
        </group>
        <Environment preset="forest" environmentIntensity={0.3} />
        <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -1, 0]}>
          <planeGeometry args={[50, 50]} />
        </mesh>
      </Suspense>
    </>
  );
}

useGLTF.preload("/models/adversaireCostom3.glb");
